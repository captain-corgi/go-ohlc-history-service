// Code generated by MockGen. DO NOT EDIT.
// Source: import_status_mysql.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/captain-corgi/go-ohlc-history-service/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockImportStatus is a mock of ImportStatus interface.
type MockImportStatus struct {
	ctrl     *gomock.Controller
	recorder *MockImportStatusMockRecorder
}

// MockImportStatusMockRecorder is the mock recorder for MockImportStatus.
type MockImportStatusMockRecorder struct {
	mock *MockImportStatus
}

// NewMockImportStatus creates a new mock instance.
func NewMockImportStatus(ctrl *gomock.Controller) *MockImportStatus {
	mock := &MockImportStatus{ctrl: ctrl}
	mock.recorder = &MockImportStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportStatus) EXPECT() *MockImportStatusMockRecorder {
	return m.recorder
}

// FindByStatusAndCreatedDate mocks base method.
func (m *MockImportStatus) FindByStatusAndCreatedDate(ctx context.Context, status, createdDate string) (entity.ImportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatusAndCreatedDate", ctx, status, createdDate)
	ret0, _ := ret[0].(entity.ImportStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatusAndCreatedDate indicates an expected call of FindByStatusAndCreatedDate.
func (mr *MockImportStatusMockRecorder) FindByStatusAndCreatedDate(ctx, status, createdDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatusAndCreatedDate", reflect.TypeOf((*MockImportStatus)(nil).FindByStatusAndCreatedDate), ctx, status, createdDate)
}

// Save mocks base method.
func (m *MockImportStatus) Save(ctx context.Context, ohlcModel entity.ImportStatus) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, ohlcModel)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockImportStatusMockRecorder) Save(ctx, ohlcModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockImportStatus)(nil).Save), ctx, ohlcModel)
}
