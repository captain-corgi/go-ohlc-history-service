// Code generated by MockGen. DO NOT EDIT.
// Source: ohlc_mysql.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/captain-corgi/go-ohlc-history-service/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockOHLC is a mock of OHLC interface.
type MockOHLC struct {
	ctrl     *gomock.Controller
	recorder *MockOHLCMockRecorder
}

// MockOHLCMockRecorder is the mock recorder for MockOHLC.
type MockOHLCMockRecorder struct {
	mock *MockOHLC
}

// NewMockOHLC creates a new mock instance.
func NewMockOHLC(ctrl *gomock.Controller) *MockOHLC {
	mock := &MockOHLC{ctrl: ctrl}
	mock.recorder = &MockOHLCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOHLC) EXPECT() *MockOHLCMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockOHLC) Count(ctx context.Context, searchModel entity.OHLCSearchRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, searchModel)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockOHLCMockRecorder) Count(ctx, searchModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOHLC)(nil).Count), ctx, searchModel)
}

// SaveAll mocks base method.
func (m *MockOHLC) SaveAll(ctx context.Context, ohlcModels []entity.OHLC) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, ohlcModels)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockOHLCMockRecorder) SaveAll(ctx, ohlcModels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockOHLC)(nil).SaveAll), ctx, ohlcModels)
}

// Search mocks base method.
func (m *MockOHLC) Search(ctx context.Context, searchModel entity.OHLCSearchRequest) ([]entity.OHLC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, searchModel)
	ret0, _ := ret[0].([]entity.OHLC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockOHLCMockRecorder) Search(ctx, searchModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockOHLC)(nil).Search), ctx, searchModel)
}
